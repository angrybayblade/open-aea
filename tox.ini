; By default, testenvs are configured to:
; - don't skip dist (skipsdist = False)
; - don't skip the package installation (skip_install = False)
; - don't use source installation (usedevelop = False)
; where one of those steps is not necessary for the test,
; we set the associated flag (e.g. for linting we don't need
; the package installation).
[tox]
envlist = bandit, safety, black, black-check, isort, isort-check, fix-copyright, check-copyright, hash-check, docs, flake8, liccheck, mypy, pylint, vulture, {plugins-,}py{3.8,3.9,3.10,3.10-cov,3.11}, dependencies-check, package-version-checks, lock-packages, package-dependencies-checks, plugins_deps, fix-doc-hashes, check-doc-links-hashes, check-generate-all-protocols, spell-check, generate-api-documentation
; when running locally we don't want to fail for no good reason
skip_missing_interpreters = true

[packages-deps]
deps = 
    gym==0.15.6
    aiohttp==3.7.4.post0
    gym==0.15.6
    hypothesis==6.21.6
    numpy>=1.18.1
    openapi-core==0.13.2
    openapi-spec-validator==0.2.8
    asn1crypto==1.4.0
    tomte[tests]==0.2.13

[tests-common]
deps =
    {[packages-deps]deps}
    docker==4.2.0
    pexpect==4.8.0
    GitPython==3.1.27
    packaging>=23.1,<24.0
    py-multibase>=1.0.0
    py-multicodec>=0.2.0
    protobuf==3.19.5
    requests==2.28.1
    mistune==2.0.3
    tomte[isort]==0.2.13
    tomte[black]==0.2.13
    tomte[tests]==0.2.13
    ; Plugin dependencies. We need this
    ; because we use --no-deps to install the plugins.
    ; aea_ledger_cosmos/aea_ledger_fetchai
    ecdsa>=0.15
    asn1crypto==1.4.0
    bech32==1.2.0
    ; aea_ledger_ethereum
    open-aea-web3==6.0.1
    ipfshttpclient==0.8.0a2
    eth-account>=0.8.0,<0.9.0
    ; for password encryption in cosmos
    pycryptodome>=3.10.1
    open-aea-cosmpy==0.6.5
    certifi<=2022.6.15.1
    google-api-python-client<=2.60.0
    idna<=3.3
    numpy>=1.18.1
    psutil==5.7.0
    setuptools==59.6.0
    protobuf==3.19.5
    ledgerwallet==0.1.3
    construct<=2.10.61
    defusedxml==0.6.0
    semver>=2.9.1,<3.0.0
    
[testenv]
basepython = python3.10
whitelist_externals = /bin/sh
passenv = *
extras = all
deps =
    setuptools==59.6.0

[commands-local-install]
commands = 
    pip install {toxinidir}[all]
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-cosmos
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-fetchai
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs


[test-framework]
deps = 
    {[tests-common]deps}
commands =
    ; for some reason tox installs aea without respect to the dependencies version specified in seetup.py. at least in CI env
    ; so install current aea in a normal way
    {[commands-local-install]commands}
    pytest -rfE --doctest-modules aea tests/ --durations=0 --cov=aea --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov-config=.coveragerc --cov-append {posargs}

[test-packages]
deps = 
    {[tests-common]deps}
commands =
    ; for some reason tox installs aea without respect to the dependencies version specified in setup.py. at least in CI env
    ; so install current aea in a normal way
    {[commands-local-install]commands}
    aea test --cov --append packages --durations=0 {posargs}

[test-plugins]
deps = 
    {[tests-common]deps}
    pytest-custom-exit-code==0.3.0
    hexbytes==0.3.0
commands =
    {[commands-local-install]commands}
    pytest -rfE plugins/aea-ledger-fetchai/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_fetchai --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    pytest -rfE plugins/aea-ledger-ethereum/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_ethereum --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    pytest -rfE plugins/aea-ledger-cosmos/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_cosmos --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    pytest -rfE plugins/aea-cli-ipfs/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_cli_ipfs --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum-hwi
    pytest -rfE plugins/aea-ledger-ethereum-hwi/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_ethereum_hwi --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}

[test-plugins-lte-3.9]
deps =
    {[tests-common]deps}
    pytest-custom-exit-code==0.3.0
commands =
    {[commands-local-install]commands}
    pytest -rfE plugins/aea-ledger-fetchai/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_fetchai --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    pytest -rfE plugins/aea-ledger-ethereum/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_ethereum --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    pytest -rfE plugins/aea-ledger-cosmos/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_cosmos --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    pytest -rfE plugins/aea-cli-ipfs/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_cli_ipfs --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}

    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum-hwi
    pytest -rfE plugins/aea-ledger-ethereum-hwi/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_ethereum_hwi --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}

    python -m pip install file://{toxinidir}/plugins/aea-ledger-ethereum-flashbots
    pytest -rfE plugins/aea-ledger-ethereum-flashbots/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_ethereum_flashbots --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}

    python -m pip install file://{toxinidir}/plugins/aea-ledger-solana
    pytest -rfE plugins/aea-ledger-solana/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_solana --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}


[testenv:py3.10]
basepython = python3.10
usedevelop = True
deps = {[test-framework]deps}
commands = {[test-framework]commands}

[testenv:packages-py3.10]
basepython = python3.10
deps = {[test-packages]deps}
commands = {[test-packages]commands}

[testenv:plugins-py3.10]
basepython = python3.10
usedevelop = True
deps = {[test-plugins-lte-3.9]deps}
commands = {[test-plugins-lte-3.9]commands}

[testenv:py3.11]
basepython = python3.11
usedevelop = True
deps = {[test-framework]deps}
commands = {[test-framework]commands}

[testenv:packages-py3.11]
basepython = python3.11
deps = {[test-packages]deps}
commands = {[test-packages]commands}

[testenv:plugins-py3.11]
basepython = python3.11
usedevelop = True
deps = {[test-plugins-lte-3.9]deps}
commands = {[test-plugins-lte-3.9]commands}

[testenv:bandit]
skipsdist = True
skip_install = True
deps =
    tomte[bandit]==0.2.13
commands = bandit -r aea examples \
           plugins/aea-ledger-fetchai/aea_ledger_fetchai \
           plugins/aea-ledger-ethereum/aea_ledger_ethereum \
           plugins/aea-ledger-ethereum-flashbots/aea-ledger-ethereum-flashbots \
           plugins/aea-ledger-cosmos/aea_ledger_cosmos \
           plugins/aea-ledger-solana/aea_ledger_solana \
           plugins/aea-cli-ipfs/aea_cli_ipfs
           bandit -s B101 -r packages
           bandit -s B101 -r tests scripts

[testenv:black]
skipsdist = True
skip_install = True
deps =
    tomte[black]==0.2.13
commands = black aea examples packages plugins scripts tests

[testenv:black-check]
skipsdist = True
skip_install = True
deps =
    tomte[black]==0.2.13
commands =black aea examples packages plugins scripts tests --check --verbose

[testenv:isort]
skipsdist = True
skip_install = True
deps =
    tomte[isort]==0.2.13
commands = isort aea examples packages plugins scripts tests

[testenv:isort-check]
skipsdist = True
skip_install = True
deps =
    tomte[isort]==0.2.13
commands = isort --check-only --verbose aea examples packages plugins scripts tests

[testenv:fix-copyright]
skipsdist = True
skip_install = True
deps =
commands = {toxinidir}/scripts/check_copyright_notice.py

[testenv:check-copyright]
skipsdist = True
skip_install = True
deps =
commands = {toxinidir}/scripts/check_copyright_notice.py --check


[testenv:hash-check]
skipsdist = True
usedevelop = True
commands =
    pip install {toxinidir}[all]
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
    aea packages lock --check
    aea --registry-path=./tests/data/packages packages lock --check

[testenv:lock-packages]
skipsdist = True
usedevelop = True
commands =
    pip install {toxinidir}[all]
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
    aea packages lock
    aea --registry-path=./tests/data/packages packages lock

[testenv:package-version-checks]
skipsdist = True
usedevelop = True
deps =
commands = {toxinidir}/scripts/check_package_versions_in_docs.py

[testenv:package-dependencies-checks]
skipsdist = True
usedevelop = True
deps = 
    {[testenv]deps}
    {[packages-deps]deps}
commands =
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum-flashbots
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-cosmos
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-fetchai
    python -m aea.cli check-packages

[testenv:docs]
skipsdist = True
skip_install = True
deps =
    tomte[docs]==0.2.13
commands = pip3 install git+https://github.com/pugong/mkdocs-mermaid-plugin.git#egg=mkdocs-mermaid-plugin
           mkdocs build --clean

[testenv:docs-serve]
skipsdist = True
skip_install = True
deps =
    tomte[docs]==0.2.13
commands = pip3 install git+https://github.com/pugong/mkdocs-mermaid-plugin.git#egg=mkdocs-mermaid-plugin
           mkdocs build --clean
           python -c 'print("###### Starting local server. Press Control+C to stop server ######")'
           mkdocs serve -a localhost:8080

[testenv:flake8]
skipsdist = True
skip_install = True
deps =
    tomte[flake8]==0.2.13
commands = flake8 aea examples packages plugins scripts tests

[testenv:liccheck]
skipsdist = True
usedevelop = True
deps =
    liccheck==0.6.0
commands = {toxinidir}/scripts/freeze_dependencies.py -o {envtmpdir}/requirements.txt
           liccheck -s strategy.ini -r {envtmpdir}/requirements.txt -l PARANOID

[testenv:mypy]
skipsdist = True
skip_install = True
deps =
    tomte[mypy]==0.2.13
commands = mypy aea packages --disallow-untyped-defs --config-file tox.ini
           mypy examples --disallow-untyped-defs --config-file tox.ini
           mypy scripts tests plugins/aea-ledger-fetchai/aea_ledger_fetchai plugins/aea-ledger-ethereum/aea_ledger_ethereum plugins/aea-ledger-ethereum-flashbots/aea_ledger_ethereum_flashbots plugins/aea-ledger-cosmos/aea_ledger_cosmos plugins/aea-cli-ipfs/aea_cli_ipfs --config-file tox.ini

[testenv:pylint]
whitelist_externals =
    /bin/sh
    /usr/bin/sh
skipsdist = True
deps =
    tomte[pylint]==0.2.13
commands =
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum
    python -m pip install file://{toxinidir}/plugins/aea-ledger-ethereum-flashbots
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-cosmos
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-fetchai
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-solana
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
    sh -c "pylint aea packages plugins/aea-ledger-fetchai/aea_ledger_fetchai plugins/aea-ledger-ethereum/aea_ledger_ethereum plugins/aea-ledger-ethereum-flashbots/aea_ledger_ethereum_flashbots plugins/aea-ledger-cosmos/aea_ledger_cosmos plugins/aea-cli-ipfs/aea_cli_ipfs scripts examples/*"

[testenv:safety]
skipsdist = True
skip_install = True
deps =
    tomte[safety]==0.2.13
commands = safety check -i 37524 -i 38038 -i 37776 -i 38039 -i 39621 -i 40291 -i 39706 -i 51358 -i 51499

[testenv:vulture]
skipsdist = True
skip_install = True
deps =
    tomte[vulture]==0.2.13
commands = vulture aea scripts/whitelist.py --exclude "*_pb2.py"

[testenv:darglint]
skipsdist = True
skip_install = True
deps =
    tomte[darglint]==0.2.13
commands = darglint aea examples libs packages plugins scripts

[testenv:fix-doc-hashes]
skipsdist = True
usedevelop = True
commands = {toxinidir}/scripts/generate_package_list.py
           {toxinidir}/scripts/check_doc_ipfs_hashes.py --fix

[testenv:check-doc-links-hashes]
skipsdist = True
usedevelop = True
commands = {toxinidir}/scripts/check_doc_links.py
           {toxinidir}/scripts/check_doc_ipfs_hashes.py
           {toxinidir}/scripts/check_ipfs_hashes_pushed.py


[testenv:generate-all-protocols]
skipsdist = True
usedevelop = True
deps =
    tomte[isort]==0.2.13
    tomte[black]==0.2.13
commands = pip install {toxinidir}[all]
           pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
           aea generate-all-protocols
           aea generate-all-protocols tests/data/packages

[testenv:check-generate-all-protocols]
skipsdist = True
usedevelop = True
deps =
    tomte[isort]==0.2.13
    tomte[black]==0.2.13
commands = pip install {toxinidir}[all]
           python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
           aea generate-all-protocols --check-clean
           aea generate-all-protocols tests/data/packages --check-clean

[testenv:spell-check]
whitelist_externals = mdspell
skipsdist = True
usedevelop = True
deps =
commands = mdspell -r -n -a --en-gb '**/*.md' '!docker-images/*.md' '!docs/api/**/*.md' '!docs/package_list.md'

[testenv:dependencies-check]
skipsdist = True
skip_install = True
commands =
    pip install {toxinidir}[all]
    pip uninstall open-aea  -y
    {toxinidir}/scripts/check_imports_and_dependencies.py

[testenv:plugins_env]
skipsdist = True
skip_install = True
passenv = *
deps =
    .[all]
whitelist_externals = /bin/sh
commands =
    - /bin/sh -c "rm -fr ./*private_key.txt"
    {posargs}

[testenv_multi]
basepython = python3
whitelist_externals = /bin/sh
passenv = *
extras = all
deps = {[tests-common]deps}

[testenv:py3.8]
basepython = python3.8
deps = {[testenv_multi]deps}
commands = {[test-framework]commands}

[testenv:packages-py3.8]
basepython = python3.8
deps = {[testenv_multi]deps}
commands = {[test-packages]commands}

[testenv:py3.9]
basepython = python3.9
deps = {[testenv_multi]deps}
commands = {[test-framework]commands}

[testenv:packages-py3.9]
basepython = python3.9
deps = {[testenv_multi]deps}
commands = {[test-packages]commands}

[testenv:plugins-py3.8]
basepython = python3.8
deps = 
    {[testenv_multi]deps}
    pytest-custom-exit-code==0.3.0
commands = {[test-plugins]commands}

[testenv:plugins-py3.9]
basepython = python3.9
deps = {[test-plugins-lte-3.9]deps}
commands = {[test-plugins-lte-3.9]commands}

[testenv:check-api-docs]
skipsdist = True
usedevelop = True
deps =
    tomte[docs]==0.2.13
    docspec==2.2.1
    docspec-python==2.2.1
commands = {toxinidir}/scripts/generate_api_docs.py --check-clean

[testenv:generate-api-documentation]
skipsdist = True
usedevelop = True
deps =
    tomte[docs]==0.2.13
    docspec==2.2.1
    docspec-python==2.2.1
commands = {toxinidir}/scripts/generate_api_docs.py


[flake8]
paths=aea,examples,packages,scripts,tests
exclude=.md,
    *_pb2.py,
    aea/__init__.py,
    aea/cli/__init__.py,
    tests/common/oef_search_pluto_scripts,
    tests/common/click_testing.py,
    scripts/oef/launch.py
max-line-length = 88
select = B,C,D,E,F,I,W,
ignore = E203,E501,W503,D202,B014,D400,D401,DAR,B028,B017
application-import-names = aea,packages,tests,scripts
per-file-ignores =
    tests/test_cli/test_upgrade.py:E800
    tests/test_protocols/test_generator/test_end_to_end.py:E800,F401
    tests/test_cli/test_launch_end_to_end.py:E800
    **/aea_ledger_cosmos/cosmos.py:F401
    **/aea_ledger_fetchai/_cosmos.py:F401

# ignore as too restrictive for our needs:
# D400: First line should end with a period
# D401: First line should be in imperative mood
# E501: https://www.flake8rules.com/rules/E501.html (Line too long)
# E203: https://www.flake8rules.com/rules/E203.html (Whitespace)
# W503: https://www.flake8rules.com/rules/W503.html (Line break)
# D202: blank lines
# B014: redundant exception

[isort]
# for black compatibility
multi_line_output=3
include_trailing_comma=True
force_grid_wrap=0
use_parentheses=True
ensure_newline_before_comments = True
line_length=88
# custom configurations
order_by_type=False
case_sensitive=True
lines_after_imports=2
skip =
    tests/data/dummy_aea/vendor/
    tests/data/dummy_aea/skills/dummy
skip_glob = **/*_pb2.py
known_first_party=aea
known_packages=packages
known_local_folder=tests
sections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,PACKAGES,LOCALFOLDER

[mypy]
python_version = 3.8
strict_optional = True

# temporary until fixed
exclude=contract_api/tests/test_contract_api.py|fipa/tests/test_fipa.py|default/tests/test_default.py|gym/tests/test_gym.py|http/tests/test_http.py|ledger_api/tests/test_ledger_api.py|oef_search/tests/test_oef_search.py|state_update/tests/test_state_update.py|tac/tests/test_tac.py|erc1155/tests/test_contract.py|gym/tests/test_handlers.py|gym/tests/test_rl_agent.py|gym/tests/test_task.py|gym/tests/test_helpers.py|gym/tests/test_dialogues.py|gym/tests/intermediate_class.py|erc1155_deploy/tests/test_behaviours.p|erc1155_deploy/tests/test_dialogues.py|erc1155_deploy/tests/test_handlers.py|erc1155_deploy/tests/test_handlers.py|erc1155_deploy/tests/test_strategy.py|erc1155_client/tests/test_behaviours.py|erc1155_client/tests/test_handlers.py|erc1155_client/tests/test_dialogues.py|erc1155_client/tests/test_strategy.py|generic_buyer/tests/test_handlers.py|generic_buyer/tests/test_behaviours.py|generic_buyer/tests/test_dialogues.py|generic_buyer/tests/test_models.py|erc1155_deploy/tests/intermediate_class.py|generic_seller/tests/test_handlers.py|generic_seller/tests/test_models.py|generic_seller/tests/test_dialogues.py|generic_seller/tests/test_behaviours.py|ledger/tests/test_ledger_api.py|local/tests/test_search_services.py|echo/tests/test_handlers.py|http_echo/tests/test_dialogues.py|http_client/tests/test_http_client.py|http_server/tests/test_http_server.py|echo/tests/test_dialogues.py|echo/tests/test_behaviours.py|local/tests/test_misc.py|signing/tests/test_signing.py|tendermint/tests/test_tendermint.py|stub/tests/test_stub.py|ledger/tests/conftest.py|erc1155_client/tests/intermediate_class.py|gym/tests/helpers.py|acn/tests/test_acn.py|packages/valory/connections/test_libp2p

# Before adding a module here, make sure it does not support type hints

# Per-module options for aea dir:

[mypy-aea/mail/base_pb2]
ignore_errors = True

[mypy-aea/helpers/multiaddr/crypto_pb2]
ignore_errors = True

[mypy-aea/helpers/search/models_pb2]
ignore_errors = True

[mypy-packages.valory.protocols.ledger_api.serialization]
ignore_errors = True

[mypy-oef.*]
ignore_missing_imports = True

[mypy-semver.*]
ignore_missing_imports = True

[mypy-eth_keys.*]
ignore_missing_imports = True

[mypy-jsonschema.*]
ignore_missing_imports = True

[mypy-dotenv]
ignore_missing_imports = True

[mypy-connexion]
ignore_missing_imports = True

[mypy-eth_account.*]
ignore_missing_imports = True

[mypy-ipfshttpclient.*]
ignore_missing_imports = True

[mypy-aea/helpers/ipfs/pb/unixfs_pb2]
ignore_errors = True

[mypy-aea/helpers/ipfs/pb/merkledag_pb2]
ignore_errors = True

[mypy-win32con.*]
ignore_missing_imports = True

[mypy-win32file.*]
ignore_missing_imports = True

[mypy-pywintypes.*]
ignore_missing_imports = True

[mypy-ecdsa.*]
ignore_missing_imports = True

[mypy-urllib3.*]
ignore_missing_imports = True

[mypy-aea_ledger_fetchai.*]
ignore_missing_imports = True

[mypy-aea_ledger_ethereum.*]
ignore_missing_imports = True

[mypy-aea_ledger_cosmos.*]
ignore_missing_imports = True

[mypy-aea_ledger_solana.*]
ignore_missing_imports = True

# Per-module options for examples dir:

[mypy-numpy]
ignore_missing_imports = True

[mypy-gym.*]
ignore_missing_imports = True

# Per-module options for tests dir:

[mypy-pytest]
ignore_missing_imports = True

[mypy-pytest_asyncio]
ignore_missing_imports = True

[mypy-docker.*]
ignore_missing_imports = True

[mypy-tests/data/generator/t_protocol/*]
ignore_errors = True

[mypy-tests/data/generator/t_protocol_no_ct/*]
ignore_errors = True

[mypy-tests/data/dummy_aea/vendor/*]
ignore_errors = True

[mypy-mistune]
ignore_missing_imports = True

[mypy-git.*]
ignore_missing_imports = True

[mypy-packaging.*]
ignore_missing_imports = True

[mypy-aiohttp.*]
ignore_missing_imports = True

[mypy-base58.*]
ignore_missing_imports = True

[mypy-multidict.*]
ignore_missing_imports = True

[mypy-web3.*]
ignore_missing_imports = True

# Per-module options for packages dir:

[mypy-packages/fetchai/protocols/contract_api/contract_api_pb2]
ignore_errors = True

[mypy-packages/fetchai/protocols/default/default_pb2]
ignore_errors = True

[mypy-packages/fetchai/protocols/fipa/fipa_pb2]
ignore_errors = True

[mypy-packages/fetchai/protocols/gym/gym_pb2]
ignore_errors = True

[mypy-packages/fetchai/protocols/http/http_pb2]
ignore_errors = True

[mypy-packages/fetchai/protocols/ledger_api/ledger_api_pb2]
ignore_errors = True

[mypy-packages/fetchai/protocols/oef_search/oef_search_pb2]
ignore_errors = True

[mypy-packages/open_aea/protocols/signing/signing_pb2]
ignore_errors = True

[mypy-packages/fetchai/protocols/state_update/state_update_pb2]
ignore_errors = True

[mypy-packages/fetchai/protocols/tac/tac_pb2]
ignore_errors = True

[mypy-packages/valory/protocols/acn/acn_pb2]
ignore_errors = True

[mypy-packages/valory/protocols/tendermint/tendermint_pb2]
ignore_errors = True

[mypy-tests/data/packages/fetchai/protocols/t_protocol/t_protocol_pb2]
ignore_errors = True

[mypy-tests/data/packages/fetchai/protocols/t_protocol_no_ct/t_protocol_no_ct_pb2]
ignore_errors = True

[mypy-tests/data/packages/fetchai/protocols/t_protocol/serialization]
ignore_errors = True

[mypy-tests/data/packages/fetchai/protocols/t_protocol_no_ct/serialization]
ignore_errors = True

[mypy-tensorflow.*]
ignore_missing_imports = True

[mypy-temper.*]
ignore_missing_imports = True

[mypy-openapi_core.*]
ignore_missing_imports = True

[mypy-openapi_spec_validator.*]
ignore_missing_imports = True

[mypy-sqlalchemy]
ignore_missing_imports = True

[mypy-defusedxml.*]
ignore_missing_imports = True

[mypy-cosmpy.*]
ignore_missing_imports = True

[mypy-google.*]
ignore_missing_imports = True

[mypy-click.*]
ignore_missing_imports = True

[mypy-yaml.*]
ignore_missing_imports = True

[mypy-requests.*]
ignore_missing_imports = True

[mypy-certifi.*]
ignore_missing_imports = True

[mypy-werkzeug.*]
ignore_missing_imports = True

[mypy-pkg_resources.*]
ignore_missing_imports = True

[mypy-gyms.*]
ignore_missing_imports = True

[mypy-rl.*]
ignore_missing_imports = True

[mypy-multibase.*]
ignore_missing_imports = True

[mypy-multicodec.*]
ignore_missing_imports = True

[mypy-morphys.*]
ignore_missing_imports = True

[mypy-multihash.*]
ignore_missing_imports = True

[mypy-coverage.*]
ignore_missing_imports = True

[mypy-Crypto.*]
ignore_missing_imports = True

[mypy-eth_typing.*]
ignore_missing_imports = True

[mypy-bech32.*]
ignore_missing_imports = True

[mypy-eth_utils.*]
ignore_missing_imports = True

[mypy-_strptime.*]
ignore_missing_imports = True

[mypy-hypothesis.*]
ignore_missing_imports = True

[mypy-hexbytes.*]
ignore_missing_imports=True

[mypy-flashbots.*]
ignore_missing_imports=True

[mypy-asyncio.*]
ignore_missing_imports=True

[darglint]
docstring_style=sphinx
strictness=short
ignore_regex=.*_pb2\.py
ignore=DAR401

; some useful links:
; - https://janelia-flyem.github.io/licenses.html
; - https://dwheeler.com/essays/floss-license-slide.html

; Authorized and unauthorized licenses in LOWER CASE
[Licenses]
authorized_licenses:
	; aliases for MIT License
	MIT
	MIT license
	https://opensource.org/licenses/MIT
	License :: OSI Approved :: MIT

	; aliases for BSD License (and variants)
	BSD
	BSD license
	new BSD
	(new) BSD
	new BDS license
	simplified BSD
	3-Clause BSD
	BSD-3-Clause
	BSD 3-Clause
	BSD-2-Clause
	BSD-like
	BSD-2-Clause or Apache-2.0
	BSD, Public Domain

	; aliases for Apache License version 2.0
	Apache 2.0
	Apache-2.0
	Apache License 2.0
	Apache License, Version 2.0
	Apache License Version 2.0
	Apache2
	ASL 2
;	some packages use 'Apache Software' as license string,
;	which is ambiguous. However, 'Apache Software'
;	will likely match with 'Apache 2.0'
	Apache Software
	BSD, Public Domain, Apache
	http://www.apache.org/licenses/LICENSE-2.0

;	PSF (BSD-style)
	Python Software Foundation
	PSF

	; other permissive licenses
	Historical Permission Notice and Disclaimer (HPND)
	HPND
	ISC
	BSD or Apache License, Version 2.0
	Modified BSD
	Expat

unauthorized_licenses:
;	aliases for MPL 2.0
	MPL-2.0
	MPL 2.0
	Mozilla Public License 2.0 (MPL 2.0)

;    Section 8 of https://www.mozilla.org/en-US/MPL/2.0/Revision-FAQ/
	MPL 1.1
	MPL-1.1

;	http://www.gnu.org/licenses/license-list.en.html#apache2
	GPLv2
	GPLv2+
	GNU General Public License v2 or later (GPLv2+)

;	LGPL
	LGPL
	GNU Library or Lesser General Public License (LGPL)

;	LGPLv2.1
	LGPLv2.1
	LGPLv2.1+

;	LGPLv3
	GNU Lesser General Public License v3 (LGPLv3)
	LGPLv3

;	GPL v3
	GPL v3
	GPLv3+

[Authorized Packages]
gym: >=0.15
;filelock is public domain
filelock: >=3.0.12
fetchai-ledger-api: >=0.0.1
chardet: >=3.0.4
certifi: >=2019.11.28

[pytest]
log_cli = 1
log_cli_level = DEBUG
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format=%Y-%m-%d %H:%M:%S

markers =
    integration: marks end-to-end tests which require the oef, soef, ledger or other network services
    unstable: marks test as unstable (won't be run in CI)
    ledger: marks tests which require ledger test networks (ethereum, cosmos, fetchai); these tests should also be marked 'integration'
    flaky: marks tests which are flaky and worth re-running
    sync: marks test for run in sync mode
    profiling: marks profiler tests that must be run separately to avoid garbage collector interferences

filterwarnings =
    ignore:the imp module is deprecated in favour of importlib:DeprecationWarning
    ignore:Call to deprecated create function FileDescriptor().
    ignore:Call to deprecated create function Descriptor().
    ignore:Call to deprecated create function FieldDescriptor().
    ignore:Call to deprecated create function EnumValueDescriptor().
    ignore:Call to deprecated create function EnumDescriptor().
    ignore:The 'asyncio_mode' default value will change to 'strict' in future, please explicitly use 'asyncio_mode=strict' or 'asyncio_mode=auto' in pytest configuration file.
    ignore:'resultcallback' has been renamed to 'result_callback'. The old name will be removed in Click 8.1.
    ignore:There is no current event loop
    ignore::DeprecationWarning
